import sqlite3
import os

def populate_database():
    db_dir = os.path.dirname(os.path.abspath(__file__))
    db_path = os.path.join(db_dir, "frostrise.db")
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.executemany('''
        INSERT OR REPLACE INTO constants (name, value, unit, description) VALUES (?, ?, ?, ?)
    ''', [
        ('g', 9.81, 'м/с²', 'Ускорение свободного падения'),
        ('rho_water', 1000, 'кг/м³', 'Плотность воды'),
        ('lambda_ice', 2.2, 'Вт/(м·°C)', 'Теплопроводность льда'),
        ('C_ice', 2100, 'кДж/(м³·°C)', 'Теплоёмкость льда'),
        ('theta_mp_example', 12.51, '°C', 'Абсолютная средняя температура на поверхности'),
        ('tau_f_example', 3624, 'ч', 'Продолжительность периода промерзания')
    ])

    cursor.executemany('''
        INSERT OR REPLACE INTO formulas (formula_name, formula_text, description, category) VALUES (?, ?, ?, ?)
    ''', [
        ('df_sp', 'df = sqrt(M * sum((lambda_i * h_i) / (lambda_eq * h_eq)))', 'Глубина промерзания по СП 121.13330', 'freezing'),
        ('Hn', 'Hn = 1.9 * sqrt(2 * lambda_f * tau_f) * (sqrt(theta_mp / eta_f) - sqrt(t0 / eta_f0))', 'Высота последнего пучащего слоя', 'heave'),
        ('eta_f', 'eta_f = 0.5 * theta_mp * C_f + rho_d * (w - ww) * 334', 'Количество тепла при фазовых переходах', 'heave'),
        ('sf_tsn', 'sf = Hn * (1 - exp(-k * df))', 'Деформация пучения по ТСН МФ-97 МО', 'heave')
    ])

    soils_data = [
        ('11_1', 'Песок гравелистый и крупный', 1600, 0.03, 0.0, 0.0, 0.0, 2.1, 2100, 0.0),
        ('11_2', 'Песок мелкий и пылеватый', 1600, 0.05, 0.0, 0.0, 0.0, 1.8, 1800, 0.2),
        ('12_1', 'Супесь легкая', 1600, 0.08, 0.05, 0.05, 0.0, 1.5, 1700, 0.4),
        ('12_2', 'Супесь тяжелая', 1600, 0.12, 0.08, 0.08, 0.0, 1.3, 1600, 0.4),
        ('13_1', 'Суглинок мягкопластичный', 1600, 0.15, 0.1, 0.1, 0.0, 1.2, 1500, 0.6),
        ('13_2', 'Суглинок тугопластичный', 1600, 0.18, 0.12, 0.12, 0.0, 1.1, 1400, 0.8),
        ('13_3', 'Суглинок полутвердый', 1600, 0.2, 0.15, 0.15, 0.0, 1.0, 1300, 1.0),
        ('14_1', 'Глина мягкопластичная', 1600, 0.22, 0.18, 0.18, 0.0, 0.9, 1200, 1.1),
        ('14_2', 'Глина тугопластичная', 1600, 0.25, 0.2, 0.2, 0.0, 0.8, 1100, 1.3),
        ('14_3', 'Глина полутвердая', 1600, 0.28, 0.25, 0.25, 0.0, 0.7, 1000, 1.5),
        ('15_1', 'Песок с Ip=0.03', 1600, 0.05, 0.03, 0.03, 0.0, 1.8, 1800, 0.2),
        ('15_2', 'Песок с Ip=0.05', 1600, 0.05, 0.05, 0.05, 0.0, 1.8, 1800, 0.2),
        ('15_3', 'Песок с Ip=0.07', 1600, 0.05, 0.07, 0.07, 0.0, 1.8, 1800, 0.2),
        ('15_4', 'Песок с Ip=0.10', 1600, 0.05, 0.10, 0.10, 0.0, 1.8, 1800, 0.2),
    ]
    cursor.executemany('''
        INSERT OR REPLACE INTO soils (code, name, rho_d, w, wp, ip, ww, lambda_f, c_f, t0) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', soils_data)

    materials_data = [
        ('Цементобетон_Btb4_8', 'Цементобетон Btb4,8', 44, 2300, 0.03, 1.90, 1675, 33520),
        ('Цементобетон_B10', 'Цементобетон B10', 20, 2300, 0.03, 1.90, 1675, 33520),
        ('Пескобетон_сущ', 'Пескобетон сущ', 20, 2000, 0.05, 1.80, 1840, 44906),
        ('Асфальтобетон', 'Асфальтобетон', 20, 2200, 0.03, 1.40, 3685, 0),
        ('Щебень', 'Щебень', 20, 1800, 0.10, 2.00, 2345, 0),
        ('Мохоторф', 'Мохоторф', 20, 800, 0.10, 0.30, 1090, 0),
    ]
    cursor.executemany('''
        INSERT OR REPLACE INTO materials (igu_code, material_type, thickness_cm, rho_d, w, lambda_f, c_f, eta_f) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', materials_data)

    conn.commit()
    conn.close()
    print("✅ БД заполнена данными")
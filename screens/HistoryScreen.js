// screens/HistoryScreen.js
import React, { useState, useEffect, useContext } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  FlatList,
  Alert,
  TextInput,
} from 'react-native';
import { ThemeContext } from '../context/ThemeContext';
import colors from '../constants/colors';
import { HistoryStorage } from '../utils/historyStorage';

const HistoryScreen = ({ navigation }) => {
  const { theme } = useContext(ThemeContext);
  const currentColors = colors[theme] || colors.light;

  const [searchQuery, setSearchQuery] = useState('');
  const [history, setHistory] = useState([]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadHistory();
  }, []);

  const loadHistory = async () => {
    try {
      const savedHistory = await HistoryStorage.getHistory();
      setHistory(savedHistory);
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é');
    }
  };

  const filteredHistory = history.filter(item =>
    item.igE?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    item.date?.includes(searchQuery) ||
    item.df?.toString().includes(searchQuery)
  );

  const handleView = (item) => {
    Alert.alert(
      '–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞',
      `–î–∞—Ç–∞: ${item.date}\n–ò–ì–≠: ${item.igE}\ndf: ${item.df}\n–¢–æ–ª—â–∏–Ω–∞: ${item.thickness} –º\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: ${item.density} –∫–≥/–º¬≥`,
      [{ text: 'OK' }]
    );
  };

  const handleExport = (item) => {
    Alert.alert('–≠–∫—Å–ø–æ—Ä—Ç', `–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—á—ë—Ç–∞ ${item.id} –≤ PDF...`);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
  };

  const handleClear = async () => {
    Alert.alert(
      '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á—ë—Ç–æ–≤?',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: '–û—á–∏—Å—Ç–∏—Ç—å',
          style: 'destructive',
          onPress: async () => {
            try {
              await HistoryStorage.clearHistory();
              setHistory([]);
              Alert.alert('–£—Å–ø–µ—Ö', '–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞');
            } catch (error) {
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é');
            }
          },
        },
      ]
    );
  };

  const handleDeleteItem = async (id) => {
    try {
      await HistoryStorage.deleteCalculation(id);
      setHistory(history.filter(item => item.id !== id));
      Alert.alert('–£—Å–ø–µ—Ö', '–†–∞—Å—á—ë—Ç —É–¥–∞–ª—ë–Ω');
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—á—ë—Ç');
    }
  };

  return (
    <View style={[styles.container, { backgroundColor: currentColors.background }]}>
      {/* –ü–æ–∏—Å–∫ –≤ iOS —Å—Ç–∏–ª–µ —Å –ª—É–ø–æ–π */}
      <View style={[styles.searchContainer, { 
        backgroundColor: currentColors.inputBackground 
      }]}>
        <View style={styles.searchIcon}>
          <Text style={styles.searchIconText}>üîç</Text>
        </View>
        <TextInput
          style={[styles.searchInput, { color: currentColors.text }]}
          placeholder="–ü–æ–∏—Å–∫ –ø–æ –ò–ì–≠ –∏–ª–∏ –¥–∞—Ç–µ..."
          value={searchQuery}
          onChangeText={setSearchQuery}
          placeholderTextColor={currentColors.constantText}
          clearButtonMode="while-editing"
        />
      </View>

      {/* –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ */}
      <FlatList
        data={filteredHistory}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={[styles.historyItem, { 
            backgroundColor: currentColors.inputBackground,
            borderColor: currentColors.inputBorder 
          }]}>
            <Text style={[styles.date, { color: currentColors.text }]}>{item.date}</Text>
            <View style={styles.resultRow}>
              <View style={[styles.tag, { backgroundColor: currentColors.tag }]}>
                <Text style={[styles.tagText, { color: currentColors.text }]}>{item.igE}</Text>
              </View>
              <View style={[styles.tag, { backgroundColor: currentColors.tag }]}>
                <Text style={[styles.tagText, { color: currentColors.text }]}>df = {item.df}</Text>
              </View>
            </View>
            <View style={styles.buttonRow}>
              <TouchableOpacity
                style={[styles.actionButton, { backgroundColor: currentColors.primaryButton }]}
                onPress={() => handleView(item)}
              >
                <Text style={[styles.buttonText, { color: currentColors.text }]}>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.actionButton, { backgroundColor: currentColors.exportButton }]}
                onPress={() => handleExport(item)}
              >
                <Text style={[styles.buttonText, { color: currentColors.text }]}>–≠–∫—Å–ø–æ—Ä—Ç</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.actionButton, styles.deleteButton, { backgroundColor: currentColors.clearHistory }]}
                onPress={() => handleDeleteItem(item.id)}
              >
                <Text style={[styles.buttonText, { color: currentColors.text }]}>–£–¥–∞–ª–∏—Ç—å</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}
        ListEmptyComponent={
          <Text style={[styles.noResults, { color: currentColors.noResults }]}>
            {history.length === 0 ? '–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤ –ø—É—Å—Ç–∞' : '–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
          </Text>
        }
        contentContainerStyle={styles.listContent}
      />

      {/* –ö–Ω–æ–ø–∫–∞ –û—á–∏—Å—Ç–∏—Ç—å */}
      <TouchableOpacity
        style={[styles.clearButton, { backgroundColor: currentColors.clearHistory }]}
        onPress={handleClear}
      >
        <Text style={[styles.buttonText, { color: currentColors.text }]}>–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderRadius: 10,
    marginBottom: 20,
    paddingHorizontal: 10,
    height: 36,
  },
  searchIcon: {
    marginRight: 8,
  },
  searchIconText: {
    fontSize: 14,
  },
  searchInput: {
    flex: 1,
    fontSize: 14,
    fontFamily: 'IBM-Plex-Mono-Regular',
    paddingVertical: 0,
  },
  listContent: {
    flexGrow: 1,
  },
  historyItem: {
    borderRadius: 8,
    padding: 15,
    marginBottom: 15,
    borderWidth: 1,
  },
  date: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 10,
    fontFamily: 'IBM-Plex-Mono-Bold',
  },
  resultRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 10,
  },
  tag: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
  },
  tagText: {
    fontSize: 14,
    fontFamily: 'IBM-Plex-Mono-Regular',
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  actionButton: {
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 4,
    flex: 1,
    marginHorizontal: 2,
    alignItems: 'center',
  },
  deleteButton: {
    // –°—Ç–∏–ª—å —É–∂–µ –∑–∞–¥–∞–Ω —á–µ—Ä–µ–∑ backgroundColor
  },
  buttonText: {
    fontSize: 12,
    fontWeight: 'bold',
    fontFamily: 'IBM-Plex-Mono-Bold',
    textAlign: 'center',
  },
  noResults: {
    textAlign: 'center',
    marginTop: 20,
    fontFamily: 'IBM-Plex-Mono-Regular',
  },
  clearButton: {
    marginTop: 20,
    paddingVertical: 15,
    borderRadius: 8,
    alignItems: 'center',
  },
});

export default HistoryScreen;